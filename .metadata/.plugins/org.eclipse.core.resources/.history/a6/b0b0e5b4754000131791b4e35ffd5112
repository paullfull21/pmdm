package com.dam.example.ejemplousoservicios;

import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.media.MediaPlayer;
import android.os.IBinder;
import android.support.v4.app.NotificationCompat;
import android.support.v4.app.TaskStackBuilder;
import android.widget.Toast;

public class ServicioMusica extends Service {
    private MediaPlayer reproductor;
    private static final int notificacionId = 1234;

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

	@Override
	public void onCreate() {
		reproductor = MediaPlayer.create(this, R.raw.one_direction);
	}

	@Override
	public void onDestroy() {
		reproductor.stop();
	}
	
	@Override
    public int onStartCommand(Intent intent, int flags, int idArranque) {
         // Comienza la reproducci—n del audio
          reproductor.start();
          
          // Creamos la notificaci—n
          
          NotificationCompat.Builder notificacion =
        	        new NotificationCompat.Builder(this)
        	        .setSmallIcon(android.R.drawable.ic_media_play)
        	        .setContentTitle("One direction")
        	        .setContentText("Kiss you!")
        	        	.setLights(0xFFFF0000, 4, 2)
        	        	.setVibrate(new long[]{1,2},0);
          
        	// Asociamos la actividad que se lanzar‡ en caso de que hagamos clic en la 
        // notificaci—n. Se hace mediante un intent expl’cito.
        	Intent resultIntent = new Intent(this, ControlServicioActivity.class);

        	// The stack builder object will contain an artificial back stack for the
        	// started Activity.
        	// This ensures that navigating backward from the Activity leads out of
        	// your application to the Home screen.
        	TaskStackBuilder stackBuilder = TaskStackBuilder.create(this);
        	// Adds the back stack for the Intent (but not the Intent itself)
        	stackBuilder.addParentStack(ControlServicioActivity.class);
        	// Adds the Intent that starts the Activity to the top of the stack
        	stackBuilder.addNextIntent(resultIntent);
        	PendingIntent resultPendingIntent = stackBuilder.getPendingIntent(0,PendingIntent.FLAG_UPDATE_CURRENT);
        	notificacion.setContentIntent(resultPendingIntent);
        	
        	NotificationManager mNotificationManager =
        	    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
        	
        
        	
        	// notificacionId nos permite identificar de forma œnica esta notificaci—n, para que de ser
        	// necesario pueda ser actualizada.
        	mNotificationManager.notify(notificacionId, notificacion.build());
          
        return START_STICKY;
    }
	
	
	
	
	
}
